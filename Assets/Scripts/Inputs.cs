//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Components/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""SquareController"",
            ""id"": ""1f967eae-f716-4986-90eb-fab49d021752"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""56a1be27-a9bb-4af8-81f4-c12c03f1a8db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""3ef32b23-7d33-470a-8289-d06f41b86f3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""0fe7e5c9-cc68-4d7f-835c-db0f28d08dc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""421e1a7c-9aaa-4fe8-8238-3c26ccd2fa8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c3111b54-cd32-44ed-ba49-16392d9baa6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""093385ca-a631-4f1e-a400-50d8e2bede40"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryConst"",
                    ""type"": ""Button"",
                    ""id"": ""cf139678-50db-4228-b376-fe485af0c5a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""2abe0b07-3791-4c65-80ad-36e4af2cec78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryConst"",
                    ""type"": ""Button"",
                    ""id"": ""dc975ee8-50cf-4fd3-a93c-70c0d896f7ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27a6a672-fef6-429d-8a34-b1f07e9a6a6e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e24df1a-c57a-458b-aec9-1221d254d633"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5c03387-e580-4b28-a42d-9436c9ab53ca"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b99f4db7-faaa-444f-8aec-929c5cbed328"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc33a90d-c946-447c-bc67-d559cb79c1dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""625af7f1-b3ba-46f6-8bce-94b34db00e85"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b8888b9-3f7c-46e0-a3f1-85bbfe13e137"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""688296c9-584b-480a-b330-2478e2b89181"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13137de5-b8c8-4903-b7d9-79bebb35ce8a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf9c2b7b-3244-4e54-99c8-d62c5e2f5500"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75360381-1073-4f11-8e0c-6f92192faa78"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""316950bb-47cc-4745-a774-432392d13534"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e8602e-ff5c-450c-b2e7-99dce76bea36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ecfd4ee-bbd2-4686-853b-59d6491c70e4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef6e7355-259f-408d-9d68-4ddbbd02d0b8"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3d021ae-dc12-4020-9b1f-78cf4c5d5502"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc613c9e-9862-43a4-8367-de128abd3269"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffb3fd8d-73be-44e8-ac97-b51e8cbdbd9f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a92f1c2d-c4b7-4923-a23e-7f5878401f0d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd5df09f-61e1-4baa-986a-9a53a9b56c90"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dbc3bf3-e947-488f-9511-9a321e1742dc"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24185348-332a-47c0-bd83-ed7e168dccde"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryConst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameUI"",
            ""id"": ""b17ee96a-0f5b-4715-a941-27393bedbc61"",
            ""actions"": [
                {
                    ""name"": ""ToggleUI"",
                    ""type"": ""Button"",
                    ""id"": ""eba82cc0-3b26-4fb4-a3d7-1780dacb2112"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollUI"",
                    ""type"": ""Value"",
                    ""id"": ""96ccd40f-94b8-4de5-9fa3-f75fcc22464d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleChat"",
                    ""type"": ""Button"",
                    ""id"": ""825a5643-23fe-4ba6-a42c-a548b560b171"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""8af6e8bd-a9e4-443b-99c7-38a1697dd4e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""116062f9-11c5-4cbd-9ced-8a85e77dd07f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c31256-dd95-4f27-90be-437f9e213f36"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44af2e59-c379-4e7b-a1d1-cdf3302379e3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feeaad1f-c659-45f1-ba89-702ce46fc196"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b11674cd-33eb-4bb2-9b31-31d14414599e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9b93e31-e0a0-4329-bbaf-f8a43aff0edf"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseMaps"",
            ""id"": ""e0c154c3-a5e3-4773-9d3d-027c1d211b3d"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""cd3d3a73-8e8b-4e77-9486-896c15e0327c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70b81ef6-b65f-422f-9b69-aecddc908f12"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChatMaps"",
            ""id"": ""53056e3c-c816-45f7-86bf-0af3a8320011"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""0cd16509-6ecd-4632-a431-76d8796223e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22dcbefc-8a2c-4ac2-b47a-4dd0762cafa6"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cursor"",
            ""id"": ""ef93b9e9-3792-4cd0-bccf-040cc90f8db2"",
            ""actions"": [
                {
                    ""name"": ""DoLocation"",
                    ""type"": ""Value"",
                    ""id"": ""693bab75-1f01-4e24-847f-b0d8986df11f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoClick"",
                    ""type"": ""Button"",
                    ""id"": ""dd76efc4-813d-4bc7-ba84-e999c7dba8d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aca8b552-5741-464a-889f-d563f6f531be"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""697e9123-1ec8-48b7-ac77-31e064e92836"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SquareController
        m_SquareController = asset.FindActionMap("SquareController", throwIfNotFound: true);
        m_SquareController_Up = m_SquareController.FindAction("Up", throwIfNotFound: true);
        m_SquareController_Down = m_SquareController.FindAction("Down", throwIfNotFound: true);
        m_SquareController_Left = m_SquareController.FindAction("Left", throwIfNotFound: true);
        m_SquareController_Right = m_SquareController.FindAction("Right", throwIfNotFound: true);
        m_SquareController_Jump = m_SquareController.FindAction("Jump", throwIfNotFound: true);
        m_SquareController_Primary = m_SquareController.FindAction("Primary", throwIfNotFound: true);
        m_SquareController_PrimaryConst = m_SquareController.FindAction("PrimaryConst", throwIfNotFound: true);
        m_SquareController_Secondary = m_SquareController.FindAction("Secondary", throwIfNotFound: true);
        m_SquareController_SecondaryConst = m_SquareController.FindAction("SecondaryConst", throwIfNotFound: true);
        // GameUI
        m_GameUI = asset.FindActionMap("GameUI", throwIfNotFound: true);
        m_GameUI_ToggleUI = m_GameUI.FindAction("ToggleUI", throwIfNotFound: true);
        m_GameUI_ScrollUI = m_GameUI.FindAction("ScrollUI", throwIfNotFound: true);
        m_GameUI_ToggleChat = m_GameUI.FindAction("ToggleChat", throwIfNotFound: true);
        m_GameUI_Tab = m_GameUI.FindAction("Tab", throwIfNotFound: true);
        // MouseMaps
        m_MouseMaps = asset.FindActionMap("MouseMaps", throwIfNotFound: true);
        m_MouseMaps_MousePosition = m_MouseMaps.FindAction("MousePosition", throwIfNotFound: true);
        // ChatMaps
        m_ChatMaps = asset.FindActionMap("ChatMaps", throwIfNotFound: true);
        m_ChatMaps_Submit = m_ChatMaps.FindAction("Submit", throwIfNotFound: true);
        // Cursor
        m_Cursor = asset.FindActionMap("Cursor", throwIfNotFound: true);
        m_Cursor_DoLocation = m_Cursor.FindAction("DoLocation", throwIfNotFound: true);
        m_Cursor_DoClick = m_Cursor.FindAction("DoClick", throwIfNotFound: true);
    }

    ~@Inputs()
    {
        UnityEngine.Debug.Assert(!m_SquareController.enabled, "This will cause a leak and performance issues, Inputs.SquareController.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GameUI.enabled, "This will cause a leak and performance issues, Inputs.GameUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MouseMaps.enabled, "This will cause a leak and performance issues, Inputs.MouseMaps.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ChatMaps.enabled, "This will cause a leak and performance issues, Inputs.ChatMaps.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Cursor.enabled, "This will cause a leak and performance issues, Inputs.Cursor.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SquareController
    private readonly InputActionMap m_SquareController;
    private List<ISquareControllerActions> m_SquareControllerActionsCallbackInterfaces = new List<ISquareControllerActions>();
    private readonly InputAction m_SquareController_Up;
    private readonly InputAction m_SquareController_Down;
    private readonly InputAction m_SquareController_Left;
    private readonly InputAction m_SquareController_Right;
    private readonly InputAction m_SquareController_Jump;
    private readonly InputAction m_SquareController_Primary;
    private readonly InputAction m_SquareController_PrimaryConst;
    private readonly InputAction m_SquareController_Secondary;
    private readonly InputAction m_SquareController_SecondaryConst;
    public struct SquareControllerActions
    {
        private @Inputs m_Wrapper;
        public SquareControllerActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_SquareController_Up;
        public InputAction @Down => m_Wrapper.m_SquareController_Down;
        public InputAction @Left => m_Wrapper.m_SquareController_Left;
        public InputAction @Right => m_Wrapper.m_SquareController_Right;
        public InputAction @Jump => m_Wrapper.m_SquareController_Jump;
        public InputAction @Primary => m_Wrapper.m_SquareController_Primary;
        public InputAction @PrimaryConst => m_Wrapper.m_SquareController_PrimaryConst;
        public InputAction @Secondary => m_Wrapper.m_SquareController_Secondary;
        public InputAction @SecondaryConst => m_Wrapper.m_SquareController_SecondaryConst;
        public InputActionMap Get() { return m_Wrapper.m_SquareController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SquareControllerActions set) { return set.Get(); }
        public void AddCallbacks(ISquareControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_SquareControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SquareControllerActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Primary.started += instance.OnPrimary;
            @Primary.performed += instance.OnPrimary;
            @Primary.canceled += instance.OnPrimary;
            @PrimaryConst.started += instance.OnPrimaryConst;
            @PrimaryConst.performed += instance.OnPrimaryConst;
            @PrimaryConst.canceled += instance.OnPrimaryConst;
            @Secondary.started += instance.OnSecondary;
            @Secondary.performed += instance.OnSecondary;
            @Secondary.canceled += instance.OnSecondary;
            @SecondaryConst.started += instance.OnSecondaryConst;
            @SecondaryConst.performed += instance.OnSecondaryConst;
            @SecondaryConst.canceled += instance.OnSecondaryConst;
        }

        private void UnregisterCallbacks(ISquareControllerActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Primary.started -= instance.OnPrimary;
            @Primary.performed -= instance.OnPrimary;
            @Primary.canceled -= instance.OnPrimary;
            @PrimaryConst.started -= instance.OnPrimaryConst;
            @PrimaryConst.performed -= instance.OnPrimaryConst;
            @PrimaryConst.canceled -= instance.OnPrimaryConst;
            @Secondary.started -= instance.OnSecondary;
            @Secondary.performed -= instance.OnSecondary;
            @Secondary.canceled -= instance.OnSecondary;
            @SecondaryConst.started -= instance.OnSecondaryConst;
            @SecondaryConst.performed -= instance.OnSecondaryConst;
            @SecondaryConst.canceled -= instance.OnSecondaryConst;
        }

        public void RemoveCallbacks(ISquareControllerActions instance)
        {
            if (m_Wrapper.m_SquareControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISquareControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_SquareControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SquareControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SquareControllerActions @SquareController => new SquareControllerActions(this);

    // GameUI
    private readonly InputActionMap m_GameUI;
    private List<IGameUIActions> m_GameUIActionsCallbackInterfaces = new List<IGameUIActions>();
    private readonly InputAction m_GameUI_ToggleUI;
    private readonly InputAction m_GameUI_ScrollUI;
    private readonly InputAction m_GameUI_ToggleChat;
    private readonly InputAction m_GameUI_Tab;
    public struct GameUIActions
    {
        private @Inputs m_Wrapper;
        public GameUIActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleUI => m_Wrapper.m_GameUI_ToggleUI;
        public InputAction @ScrollUI => m_Wrapper.m_GameUI_ScrollUI;
        public InputAction @ToggleChat => m_Wrapper.m_GameUI_ToggleChat;
        public InputAction @Tab => m_Wrapper.m_GameUI_Tab;
        public InputActionMap Get() { return m_Wrapper.m_GameUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameUIActions set) { return set.Get(); }
        public void AddCallbacks(IGameUIActions instance)
        {
            if (instance == null || m_Wrapper.m_GameUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameUIActionsCallbackInterfaces.Add(instance);
            @ToggleUI.started += instance.OnToggleUI;
            @ToggleUI.performed += instance.OnToggleUI;
            @ToggleUI.canceled += instance.OnToggleUI;
            @ScrollUI.started += instance.OnScrollUI;
            @ScrollUI.performed += instance.OnScrollUI;
            @ScrollUI.canceled += instance.OnScrollUI;
            @ToggleChat.started += instance.OnToggleChat;
            @ToggleChat.performed += instance.OnToggleChat;
            @ToggleChat.canceled += instance.OnToggleChat;
            @Tab.started += instance.OnTab;
            @Tab.performed += instance.OnTab;
            @Tab.canceled += instance.OnTab;
        }

        private void UnregisterCallbacks(IGameUIActions instance)
        {
            @ToggleUI.started -= instance.OnToggleUI;
            @ToggleUI.performed -= instance.OnToggleUI;
            @ToggleUI.canceled -= instance.OnToggleUI;
            @ScrollUI.started -= instance.OnScrollUI;
            @ScrollUI.performed -= instance.OnScrollUI;
            @ScrollUI.canceled -= instance.OnScrollUI;
            @ToggleChat.started -= instance.OnToggleChat;
            @ToggleChat.performed -= instance.OnToggleChat;
            @ToggleChat.canceled -= instance.OnToggleChat;
            @Tab.started -= instance.OnTab;
            @Tab.performed -= instance.OnTab;
            @Tab.canceled -= instance.OnTab;
        }

        public void RemoveCallbacks(IGameUIActions instance)
        {
            if (m_Wrapper.m_GameUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameUIActions instance)
        {
            foreach (var item in m_Wrapper.m_GameUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameUIActions @GameUI => new GameUIActions(this);

    // MouseMaps
    private readonly InputActionMap m_MouseMaps;
    private List<IMouseMapsActions> m_MouseMapsActionsCallbackInterfaces = new List<IMouseMapsActions>();
    private readonly InputAction m_MouseMaps_MousePosition;
    public struct MouseMapsActions
    {
        private @Inputs m_Wrapper;
        public MouseMapsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_MouseMaps_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MouseMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseMapsActions set) { return set.Get(); }
        public void AddCallbacks(IMouseMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseMapsActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMouseMapsActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMouseMapsActions instance)
        {
            if (m_Wrapper.m_MouseMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseMapsActions @MouseMaps => new MouseMapsActions(this);

    // ChatMaps
    private readonly InputActionMap m_ChatMaps;
    private List<IChatMapsActions> m_ChatMapsActionsCallbackInterfaces = new List<IChatMapsActions>();
    private readonly InputAction m_ChatMaps_Submit;
    public struct ChatMapsActions
    {
        private @Inputs m_Wrapper;
        public ChatMapsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_ChatMaps_Submit;
        public InputActionMap Get() { return m_Wrapper.m_ChatMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatMapsActions set) { return set.Get(); }
        public void AddCallbacks(IChatMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatMapsActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IChatMapsActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IChatMapsActions instance)
        {
            if (m_Wrapper.m_ChatMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChatMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChatMapsActions @ChatMaps => new ChatMapsActions(this);

    // Cursor
    private readonly InputActionMap m_Cursor;
    private List<ICursorActions> m_CursorActionsCallbackInterfaces = new List<ICursorActions>();
    private readonly InputAction m_Cursor_DoLocation;
    private readonly InputAction m_Cursor_DoClick;
    public struct CursorActions
    {
        private @Inputs m_Wrapper;
        public CursorActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoLocation => m_Wrapper.m_Cursor_DoLocation;
        public InputAction @DoClick => m_Wrapper.m_Cursor_DoClick;
        public InputActionMap Get() { return m_Wrapper.m_Cursor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CursorActions set) { return set.Get(); }
        public void AddCallbacks(ICursorActions instance)
        {
            if (instance == null || m_Wrapper.m_CursorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CursorActionsCallbackInterfaces.Add(instance);
            @DoLocation.started += instance.OnDoLocation;
            @DoLocation.performed += instance.OnDoLocation;
            @DoLocation.canceled += instance.OnDoLocation;
            @DoClick.started += instance.OnDoClick;
            @DoClick.performed += instance.OnDoClick;
            @DoClick.canceled += instance.OnDoClick;
        }

        private void UnregisterCallbacks(ICursorActions instance)
        {
            @DoLocation.started -= instance.OnDoLocation;
            @DoLocation.performed -= instance.OnDoLocation;
            @DoLocation.canceled -= instance.OnDoLocation;
            @DoClick.started -= instance.OnDoClick;
            @DoClick.performed -= instance.OnDoClick;
            @DoClick.canceled -= instance.OnDoClick;
        }

        public void RemoveCallbacks(ICursorActions instance)
        {
            if (m_Wrapper.m_CursorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICursorActions instance)
        {
            foreach (var item in m_Wrapper.m_CursorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CursorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CursorActions @Cursor => new CursorActions(this);
    public interface ISquareControllerActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPrimary(InputAction.CallbackContext context);
        void OnPrimaryConst(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnSecondaryConst(InputAction.CallbackContext context);
    }
    public interface IGameUIActions
    {
        void OnToggleUI(InputAction.CallbackContext context);
        void OnScrollUI(InputAction.CallbackContext context);
        void OnToggleChat(InputAction.CallbackContext context);
        void OnTab(InputAction.CallbackContext context);
    }
    public interface IMouseMapsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IChatMapsActions
    {
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface ICursorActions
    {
        void OnDoLocation(InputAction.CallbackContext context);
        void OnDoClick(InputAction.CallbackContext context);
    }
}
